import{_ as t,c as e,o as a,a4 as r}from"./chunks/framework.CAy_Deu4.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"notes/Vue3基础/2.Vue_3_基础/02.响应式数据.md","filePath":"notes/Vue3基础/2.Vue_3_基础/02.响应式数据.md"}'),d={name:"notes/Vue3基础/2.Vue_3_基础/02.响应式数据.md"},i=r('<h2 id="响应式数据" tabindex="-1">响应式数据 <a class="header-anchor" href="#响应式数据" aria-label="Permalink to &quot;响应式数据&quot;">​</a></h2><h3 id="什么是响应式" tabindex="-1">什么是响应式 <a class="header-anchor" href="#什么是响应式" aria-label="Permalink to &quot;什么是响应式&quot;">​</a></h3><p>响应式是为了实现数据和函数的联动，当数据变化后，用到该数据的函数会自动重新执行。</p><ul><li>副作用函数，会更改程序里的状态，比如更新DOM</li></ul><p>响应式的基本思路：</p><ul><li><p>创建代理对象</p></li><li><p>获取值时，在 get 里收集依赖关系，将当前运行的函数设为订阅者</p></li><li><p>修改值时，在 set 里触发执行，通知所有订阅过的函数重新执行</p></li></ul><h3 id="ref、reactive" tabindex="-1">ref、reactive <a class="header-anchor" href="#ref、reactive" aria-label="Permalink to &quot;ref、reactive&quot;">​</a></h3><p>setup中定义的变量不是响应式的，需要使用 ref 和 reactive 来定义响应式的数据</p><table tabindex="0"><thead><tr><th>响应式API</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>ref</td><td>返回一个响应式的、可更改的 ref 对象 【参数为基本数据类型，或对象】</td><td>ref 对象是可更改的，也就是说你可以为 <code>.value</code> 赋予新的值</td></tr><tr><td>reactive</td><td>返回一个对象的响应式代理 【参数只能是对象或数组】</td><td>重新分配一个新对象，会失去响应式。即：不能重新赋值</td></tr><tr><td>toRefs</td><td>将一个响应式对象中的每一个属性，都转换为<code>ref</code>对象，方便解构</td><td></td></tr></tbody></table><ul><li>reactive 响应式转换是“深层”的：它会影响到所有嵌套的属性。</li></ul><p>​ 即：这些嵌套的对象和数组发生变化，也会触发视图更新</p><ul><li><strong>在组合式函数，及在pinia中，最好都使用 ref</strong></li></ul>',12),o=[i];function l(_,c,s,n,h,p){return a(),e("div",null,o)}const m=t(d,[["render",l]]);export{f as __pageData,m as default};
