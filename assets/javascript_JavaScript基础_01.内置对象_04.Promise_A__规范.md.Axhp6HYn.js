import{_ as e,c as s,o as a,a4 as i}from"./chunks/framework.AxSQlOX8.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/JavaScript基础/01.内置对象/04.Promise_A+_规范.md","filePath":"javascript/JavaScript基础/01.内置对象/04.Promise_A+_规范.md"}'),t={name:"javascript/JavaScript基础/01.内置对象/04.Promise_A+_规范.md"},o=i('<h2 id="promise-a-规范" tabindex="-1">Promise/A+ 规范 <a class="header-anchor" href="#promise-a-规范" aria-label="Permalink to &quot;Promise/A+ 规范&quot;">​</a></h2><p>核心的 Promises/A+ 规范，专注于提供一个通用的 <code>.then</code> 方法，而不设计如何创建、解决和拒绝 Promise。</p><h2 id="术语" tabindex="-1">术语 <a class="header-anchor" href="#术语" aria-label="Permalink to &quot;术语&quot;">​</a></h2><ul><li><strong>Promise</strong>：Promise 是一个拥有 <code>.then</code> 方法的对象或函数</li><li><strong>thenable</strong>：是一个定义了 <code>.then</code> 方法的对象或函数</li><li><strong>值（value）</strong>：指任何 JavaScript 的合法值</li><li><strong>异常（exception）</strong>：是使用 <code>throw</code> 语句抛出的一个值。</li><li><strong>拒绝原因（reason）</strong>：表示一个 Promise 的拒绝原因。</li></ul><h2 id="状态" tabindex="-1">状态 <a class="header-anchor" href="#状态" aria-label="Permalink to &quot;状态&quot;">​</a></h2><p>一个 Promise 的当前状态必须为以下三种状态中的一种：<code>pending</code>（进行中）、<code>fulfilled</code>（已成功）和<code>rejected</code>（已失败）</p><h2 id="then-方法" tabindex="-1">then 方法 <a class="header-anchor" href="#then-方法" aria-label="Permalink to &quot;then 方法&quot;">​</a></h2><p>一个 Promise 必须提供一个 <code>then</code> 方法以访问其<strong>当前值</strong>、<strong>终值</strong>和<strong>拒绝原因</strong>。</p><p>Promise 的 then 方法接受两个参数：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onFulfilled, onRejected);</span></span></code></pre></div><h2 id="返回" tabindex="-1">返回 <a class="header-anchor" href="#返回" aria-label="Permalink to &quot;返回&quot;">​</a></h2><p><code>then</code> 方法必须返回一个 Promise 对象</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">promise2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> promise1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onFulfilled, onRejected);</span></span></code></pre></div>',13),n=[o];function r(l,h,d,c,p,k){return a(),s("div",null,n)}const m=e(t,[["render",r]]);export{g as __pageData,m as default};
