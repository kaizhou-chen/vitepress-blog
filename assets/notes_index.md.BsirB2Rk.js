import{_ as a}from"./chunks/nginx_config.BJVMlQWk.js";import{_ as i,c as t,a2 as n,o as e}from"./chunks/framework.QcI9UzYB.js";const p="/vitepress-blog/assets/%E9%AB%98%E7%BA%A7%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE.telbIBjr.png",l="/vitepress-blog/assets/pnpm.E6lX-lyU.png",h="/vitepress-blog/assets/git_config.Bx4rB9E2.png",r="/vitepress-blog/assets/VSCode_admin.BZQPZXKK.png",o="/vitepress-blog/assets/VSCode_font_size.Bi_SevWw.png",d="/vitepress-blog/assets/VSCode_settings_json.DCnANmfq.png",k="/vitepress-blog/assets/WinRAR_context_menu.CQpBApX-.png",g="/vitepress-blog/assets/welcome.CFBAootZ.png",c="/vitepress-blog/assets/DawnLauncher_columns.fmNeOKEt.png",F="/vitepress-blog/assets/DawnLauncher_layout.-tmax0HH.png",u="/vitepress-blog/assets/DawnLauncher_watch_floder.CCO7TlwX.png",b="/vitepress-blog/assets/git_local.kDoMkfUx.png",_=JSON.parse('{"title":"开发工具","description":"","frontmatter":{},"headers":[],"relativePath":"notes/index.md","filePath":"notes/index.md"}'),E={name:"notes/index.md"};function m(B,s,C,y,v,q){return e(),t("div",null,s[0]||(s[0]=[n(`<h1 id="开发工具" tabindex="-1">开发工具 <a class="header-anchor" href="#开发工具" aria-label="Permalink to &quot;开发工具&quot;">​</a></h1><h2 id="node-js" tabindex="-1">Node.js <a class="header-anchor" href="#node-js" aria-label="Permalink to &quot;Node.js&quot;">​</a></h2><h3 id="配置镜像源-registry" tabindex="-1">配置镜像源 registry <a class="header-anchor" href="#配置镜像源-registry" aria-label="Permalink to &quot;配置镜像源 registry&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-dark github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看镜像源</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> registry</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置镜像源</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> registry=https://registry.npmmirror.com/</span></span></code></pre></div><p>配置文件存放在 <strong>%USERPROFILE%</strong> 下的 .npmrc</p><h3 id="修改缓存路径" tabindex="-1">修改缓存路径 <a class="header-anchor" href="#修改缓存路径" aria-label="Permalink to &quot;修改缓存路径&quot;">​</a></h3><p><strong>1、查看默认配置路径</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-dark github-dark vp-code" tabindex="0"><code><span class="line"><span>npm config ls</span></span></code></pre></div><p>cache：缓存模块</p><p>global：全局安装模块</p><p><strong>2、新建缓存文件夹</strong>，不放在C盘，减少C盘的磁盘占用，比如</p><p>D:\\node_modules\\npm_cache</p><p>D:\\node_modules\\npm_global</p><p><strong>3、修改默认配置</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-dark github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 缓存模块</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> cache</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> &quot;D:\\node_modules\\npm_cache&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 全局安装模块</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> prefix</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> &quot;D:\\node_modules\\npm_global&quot;</span></span></code></pre></div><p><strong>4、配置环境变量</strong></p><p>我的电脑 -&gt; 右键 -&gt; 属性，高级系统设置 -&gt; 环境变量，在 Path 里，添加 global 路径</p><p>D:\\node_modules\\npm_global</p><p><img src="`+p+`" alt="高级系统设置"></p><h3 id="pnpm" tabindex="-1">pnpm <a class="header-anchor" href="#pnpm" aria-label="Permalink to &quot;pnpm&quot;">​</a></h3><p><a href="https://blog.csdn.net/m0_56416743/article/details/136122153" target="_blank" rel="noreferrer">基本使用教程</a></p><p>安装</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-dark github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> pnpm</span></span></code></pre></div><p>查看版本</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-dark github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> -v</span></span></code></pre></div><blockquote><p>如果提示 “<strong>pnpm不是内部或外部命令</strong>”，则参考上一步，检查环境变量的配置</p></blockquote><p>配置源</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-dark github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取当前配置的镜像地址</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> registry</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置新的镜像地址</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> registry</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> https://registry.npmmirror.com</span></span></code></pre></div><p>修改官方默认的安装包安装路径位置</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-dark github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 允许设置全局安装包的 bin 文件的目标目录。</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> global-bin-dir</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> &quot;D:\\pnpm-store&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 包元数据缓存的位置。</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> cache-dir</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> &quot;D:\\pnpm-store\\pnpm-cache&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># pnpm 创建的当前仅由更新检查器使用的 pnpm-state.json 文件的目录。</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> state-dir</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> &quot;D:\\pnpm-store\\pnpm-state&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定储存全局依赖的目录。</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> global-dir</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> &quot;D:\\pnpm-store\\global&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 所有包被保存在磁盘上的位置。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#（可选，以下这条命令可以选择不执行也是OK的）</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> store-dir</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> &quot;D:\\pnpm-store\\pnpm-store&quot;</span></span></code></pre></div><p>配置文件</p><blockquote><p><strong>C:\\Users\\用户名\\AppData\\Local\\pnpm\\config</strong></p></blockquote><p><img src="`+l+`" alt="pnpm"></p><h2 id="git" tabindex="-1">Git <a class="header-anchor" href="#git" aria-label="Permalink to &quot;Git&quot;">​</a></h2><h3 id="配置邮箱、账号、密码" tabindex="-1">配置邮箱、账号、密码 <a class="header-anchor" href="#配置邮箱、账号、密码" aria-label="Permalink to &quot;配置邮箱、账号、密码&quot;">​</a></h3><p>TortoiseGit --&gt; Settings</p><ul><li><p>填写工号、邮箱</p></li><li><p>编辑 .gitconfig，增加 [credential] 配置项，设置为保存用户名和密码</p></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-dark github-dark vp-code" tabindex="0"><code><span class="line"><span>[user]</span></span>
<span class="line"><span>  name = 工号</span></span>
<span class="line"><span>  email = 邮箱</span></span>
<span class="line"><span>[credential]</span></span>
<span class="line"><span>    helper = store</span></span></code></pre></div><p><img src="`+h+'" alt=""></p><p>配置文件存放在 <strong>%USERPROFILE%</strong> 下的 .gitconfig</p><h4 id="不要忽略文件大小写" tabindex="-1">不要忽略文件大小写 <a class="header-anchor" href="#不要忽略文件大小写" aria-label="Permalink to &quot;不要忽略文件大小写&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-dark github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> core.ignorecase</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> false</span></span></code></pre></div><h4 id="代码提交流程" tabindex="-1">代码提交流程 <a class="header-anchor" href="#代码提交流程" aria-label="Permalink to &quot;代码提交流程&quot;">​</a></h4><ul><li>在远程代码仓，基于开发分支，创建个人分支</li><li>本地拉取个人分支的代码【Git Clone】</li><li>每天及时 pull 拉取代码，保持本地代码和远程代码没有冲突</li><li>提交代码到个人分支 commit，并推送 push</li><li>在远程代码仓，创建合并请求，将个人分支的代码，合入开发分支，并找人检视代码</li><li>如果有代码冲突，将自己的代码文件单独备份，用 Beyond Compare 比较冲突，和开发分支保持一致后，再贴入自己的代码</li><li>检查流水线是否有异常，是否为自己合入的代码，导致的异常</li></ul><h2 id="vscode" tabindex="-1">VSCode <a class="header-anchor" href="#vscode" aria-label="Permalink to &quot;VSCode&quot;">​</a></h2><h3 id="以管理员身份运行" tabindex="-1">以管理员身份运行 <a class="header-anchor" href="#以管理员身份运行" aria-label="Permalink to &quot;以管理员身份运行&quot;">​</a></h3><p>VSCode 桌面快捷方式，右键 --&gt; 属性 --&gt; 快捷方式 --&gt; 高级 --&gt; 以管理员身份运行</p><blockquote><p>在命令行里执行某些命令时，需要有管理员身份。为了避免执行出错，用管理员身份运行VSCode</p></blockquote><p><img src="'+r+'" alt=""></p><h3 id="字体大小" tabindex="-1">字体大小 <a class="header-anchor" href="#字体大小" aria-label="Permalink to &quot;字体大小&quot;">​</a></h3><p>文件 --&gt; 首选项 --&gt; 窗口 --&gt; Zoom Level 设置了 <em><strong>1</strong></em></p><p><img src="'+o+'" alt=""></p><h4 id="settings-json" tabindex="-1">settings.json <a class="header-anchor" href="#settings-json" aria-label="Permalink to &quot;settings.json&quot;">​</a></h4><p>文件 --&gt; 首选项 --&gt; 设置 --&gt; 打开设置</p><p><img src="'+d+`" alt=""></p><p><strong>常用插件</strong></p><table tabindex="0"><thead><tr><th>名称</th><th></th></tr></thead><tbody><tr><td>Vue - Official (Volar)</td><td>Vue 3 语言支持</td></tr><tr><td>Vue 3 VS Code Snippets</td><td>Vue 3 常用代码片段</td></tr><tr><td>GitLens</td><td>查看代码修改记录</td></tr><tr><td>ESLint</td><td>代码规范检查</td></tr></tbody></table><p>插件存放在 <strong>%USERPROFILE%.vscode\\extensions</strong></p><p><strong>快捷键</strong></p><table tabindex="0"><thead><tr><th></th><th><strong>快捷键</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>Windows 快捷键</strong></td><td>Win + D</td><td>切换到桌面</td></tr><tr><td></td><td>Win + L</td><td>锁定电脑</td></tr><tr><td><strong>VSCode 快捷键</strong></td><td>Ctrl + \`</td><td>显示 / 隐藏 <span style="color:tomato;">终端</span></td></tr><tr><td></td><td>Ctrl + B</td><td>显示 / 隐藏 <span style="color:tomato;">左侧目录栏</span></td></tr><tr><td></td><td>Ctrl + P</td><td>打开文件</td></tr><tr><td></td><td>Ctrl + G</td><td>跳转到指定行</td></tr><tr><td></td><td>Ctrl + Shift + O</td><td>跳转到指定函数</td></tr></tbody></table><p><strong>搜索</strong></p><p>在指定的文件夹下搜索</p><p>在文件夹上，右键 -&gt; 在文件夹中查找</p><br><p><strong>Emmet</strong></p><p>常用的 Emmet 语法</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-dark github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">table</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">tr</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">td</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">3</span></span></code></pre></div><p><strong>代码片段</strong></p><p>Ctrl + Shift + P --&gt; Configure User Snippets --&gt; 选择 javascript</p><p>javascript.json</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-dark github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;">&quot;Import Router&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;">  &quot;prefix&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;">&quot;import-route&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;">  &quot;body&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;">    &quot;import { useRoute, useRouter } from &#39;vue-router&#39;&quot;</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="postman" tabindex="-1">Postman <a class="header-anchor" href="#postman" aria-label="Permalink to &quot;Postman&quot;">​</a></h2><p>在浏览器里安装如下扩展（开发者模式）：</p><p><strong>Postman-5.5.6</strong></p><p><strong>Postman Interceptor-3.1.0</strong></p><blockquote><p>加载成功后两个程序会生成各自的ID</p><p>用 Postman Interceptor v3.1.0 的ID去修改 Postman v5.5.6 目录下两个文件 /js/requester.js 与 /js/runner.js 中 postman_interceptor_id 的值</p><p>ID替换文件中【aicmkgpgakddgnaphhhpliifpcfhicfo】字符，或原来 postman_interceptor_id 的值，并重新加载两插件。</p></blockquote><h2 id="windows" tabindex="-1">Windows <a class="header-anchor" href="#windows" aria-label="Permalink to &quot;Windows&quot;">​</a></h2><h3 id="控制面板" tabindex="-1">控制面板 <a class="header-anchor" href="#控制面板" aria-label="Permalink to &quot;控制面板&quot;">​</a></h3><p>桌面，右键 --&gt; 个性化 --&gt; 主题 --&gt; 桌面图标设置</p><h3 id="查看端口占用" tabindex="-1">查看端口占用 <a class="header-anchor" href="#查看端口占用" aria-label="Permalink to &quot;查看端口占用&quot;">​</a></h3><p><kbd>Win</kbd> + <kbd>R</kbd> --&gt; cmd ，打开命令行，执行如下的命令</p><ul><li>查看端口的占用情况</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-dark github-dark vp-code" tabindex="0"><code><span class="line"><span>netstat -ano|findstr &quot;8080&quot;</span></span></code></pre></div><ul><li>根据查到的进程id，杀掉进程</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-dark github-dark vp-code" tabindex="0"><code><span class="line"><span>taskkill /f /pid &quot;4707&quot;</span></span></code></pre></div><h3 id="win11-右键菜单" tabindex="-1">Win11 右键菜单 <a class="header-anchor" href="#win11-右键菜单" aria-label="Permalink to &quot;Win11 右键菜单&quot;">​</a></h3><p>恢复成以前的右键菜单</p><p><kbd>Win</kbd> + <kbd>R</kbd> --&gt; cmd ，打开命令行，执行如下的命令</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-dark github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">reg</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> &quot;HKCU\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\\InprocServer32&quot;</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> /f</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> /ve</span></span></code></pre></div><p>然后重启电脑</p><h3 id="winrar-右键菜单" tabindex="-1">WinRAR 右键菜单 <a class="header-anchor" href="#winrar-右键菜单" aria-label="Permalink to &quot;WinRAR 右键菜单&quot;">​</a></h3><p>如果 WinRAR 右键菜单不见了，按照如下步骤设置</p><p><kbd>Win</kbd> + <kbd>R</kbd> --&gt; winrar，在选项 -&gt; 设置 里，勾选 <code>遗留关联菜单</code></p><p><img src="`+k+'" alt=""></p><h3 id="bing-wallpaper" tabindex="-1">Bing Wallpaper <a class="header-anchor" href="#bing-wallpaper" aria-label="Permalink to &quot;Bing Wallpaper&quot;">​</a></h3><p>图片存放在 <strong>%USERPROFILE%\\AppData\\Local\\Microsoft\\BingWallpaperApp\\WPImages</strong></p><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><h3 id="nginx" tabindex="-1">Nginx <a class="header-anchor" href="#nginx" aria-label="Permalink to &quot;Nginx&quot;">​</a></h3><h4 id="启动" tabindex="-1">启动 <a class="header-anchor" href="#启动" aria-label="Permalink to &quot;启动&quot;">​</a></h4><p><sup>[ <a href="https://www.cnblogs.com/jiangwangxiang/p/8481661.html" title="参考资料" target="_blank" rel="noreferrer">1</a> ]</sup> windows版本，下载地址：<a href="http://nginx.org/download/nginx-1.19.0.zip" target="_blank" rel="noreferrer"> nginx/Windows-1.19.0</a></p><p>下载后解压，路径不要包含中文</p><blockquote><p>[!ATTENTION] 使用windows版本的 nginx 启动时遇到(1113: No mapping for the Unicode character exists in the target multi-byte code page)这个错误<br>后来查阅资料发现是因为解压的路径里面包含有中文的缘故，只要把解压后的文件剪切到没有包含中文的目录即可解决问题</p></blockquote><br><p><strong>1. 启动</strong></p><p>双击 nginx.exe，之后一个黑色的弹窗一闪而过</p><br><p><strong>检查 nginx 是否启动成功</strong></p><p>在浏览器里访问网址 <a href="http://localhost:80" target="_blank" rel="noreferrer">http://localhost:80</a> ，出现如下页面说明启动成功</p><p><img src="'+g+`" alt=""></p><h4 id="nginx-conf" tabindex="-1">nginx.conf <a class="header-anchor" href="#nginx-conf" aria-label="Permalink to &quot;nginx.conf&quot;">​</a></h4><p>nginx 的配置文件放在 conf / nginx.conf</p><blockquote><p>在前端项目执行 build 打包后，将打包完成的 dist 文件夹，复制到 nginx 的 html 目录下，并修改如下配置</p></blockquote><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-dark github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> ^~</span><span style="--shiki-light:#DBEDFF;--shiki-dark:#DBEDFF;"> /vue3-guide </span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">  alias </span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">  html/dist;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">  try_files </span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">$uri $uri/ /index.html;</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><img src="`+a+'" alt=""></p><p><strong>1.更新配置</strong></p><p>当我们修改了nginx 的配置文件 nginx.conf 后，不需要重新启动 nginx，只需要在 nginx 的目录执行如下命令就可让改动生效</p><p><code>nginx -s reload</code></p><h3 id="pixpin" tabindex="-1">PixPin <a class="header-anchor" href="#pixpin" aria-label="Permalink to &quot;PixPin&quot;">​</a></h3><p>支持截图、贴图</p><h3 id="搜狗输入法" tabindex="-1">搜狗输入法 <a class="header-anchor" href="#搜狗输入法" aria-label="Permalink to &quot;搜狗输入法&quot;">​</a></h3><p><strong>中文时使用中文标点</strong></p><p>输入法图标，右键 --&gt; 更多设置 --&gt; 常用 --&gt; 中文时使用英文标点【取消勾选】</p><h3 id="dawn-launcher" tabindex="-1">Dawn Launcher <a class="header-anchor" href="#dawn-launcher" aria-label="Permalink to &quot;Dawn Launcher&quot;">​</a></h3><p><a href="https://dawnlauncher.com/" target="_blank" rel="noreferrer">下载地址</a></p><p><strong>1. 设置列数</strong></p><ul><li>项目 --&gt; 布局：列表 --&gt; 列数：10</li><li>项目 --&gt; 双击打开</li></ul><p><img src="'+c+'" alt=""></p><p><strong>2. 设置布局</strong></p><p><img src="'+F+'" alt=""></p><p><strong>3. 关联文件夹</strong></p><p><img src="'+u+'" alt=""></p><h3 id="本地开发" tabindex="-1">本地开发 <a class="header-anchor" href="#本地开发" aria-label="Permalink to &quot;本地开发&quot;">​</a></h3><p><strong>创建本地代码仓</strong></p><p>进入目录右键目录空白处选择&quot;Git Create repository here...&quot;,弹出对话框点确认,这样即建立了一个本地Git仓库.</p><p><img src="'+b+'" alt=""></p>',135)]))}const D=i(E,[["render",m]]);export{_ as __pageData,D as default};
