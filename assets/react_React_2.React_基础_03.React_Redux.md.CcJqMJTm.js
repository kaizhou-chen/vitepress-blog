import{_ as s,c as i,o as a,a4 as t}from"./chunks/framework.AxSQlOX8.js";const g=JSON.parse('{"title":"React Redux","description":"","frontmatter":{},"headers":[],"relativePath":"react/React/2.React_基础/03.React_Redux.md","filePath":"react/React/2.React_基础/03.React_Redux.md"}'),e={name:"react/React/2.React_基础/03.React_Redux.md"},n=t(`<h1 id="react-redux" tabindex="-1">React Redux <a class="header-anchor" href="#react-redux" aria-label="Permalink to &quot;React Redux&quot;">​</a></h1><h2 id="定义-store" tabindex="-1">定义 store <a class="header-anchor" href="#定义-store" aria-label="Permalink to &quot;定义 store&quot;">​</a></h2><p><strong>store / store.ts</strong></p><p>如下 2 个文件，参考官方文档 <a href="https://cn.react-redux.js.org/tutorials/typescript-quick-start" target="_blank" rel="noreferrer">React Redux 快速入门</a> ，几乎不用做改动</p><p><strong>store.ts</strong> 、 <strong>hooks.ts</strong></p><p><strong>store / reducer / appSlice.ts</strong></p><p>这个文件里的代码，简单理解成 Java Bean 的 getters、setters，只写模版代码，不写业务逻辑</p><p><strong>main.tsx</strong></p><p>将 App 组件包裹在 <code>&lt;Provider&gt;</code>标签中，为所有组件提供 store</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ReactDOM </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react-dom/client&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> App </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./App.tsx&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { store } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./store/store.ts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Provider } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react-redux&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ReactDOM.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createRoot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;root&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Provider</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{store}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="useselector、usedispatch" tabindex="-1">useSelector、useDispatch <a class="header-anchor" href="#useselector、usedispatch" aria-label="Permalink to &quot;useSelector、useDispatch&quot;">​</a></h2><p>useSelector：使用一个 selector 函数从 Redux store 的 <code>state</code> 中提取数据</p><p>useDispatch：返回一个 Redux store 中的 <code>dispatch</code> 函数</p>`,13),p=[n];function h(r,l,k,d,o,c){return a(),i("div",null,p)}const y=s(e,[["render",h]]);export{g as __pageData,y as default};
