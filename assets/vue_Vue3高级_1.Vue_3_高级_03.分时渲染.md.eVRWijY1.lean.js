import{_ as i,c as a,a2 as n,o as h}from"./chunks/framework.QcI9UzYB.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"vue/Vue3高级/1.Vue_3_高级/03.分时渲染.md","filePath":"vue/Vue3高级/1.Vue_3_高级/03.分时渲染.md"}'),l={name:"vue/Vue3高级/1.Vue_3_高级/03.分时渲染.md"};function k(t,s,p,E,e,r){return h(),a("div",null,s[0]||(s[0]=[n(`<h2 id="分时渲染" tabindex="-1">分时渲染 <a class="header-anchor" href="#分时渲染" aria-label="Permalink to &quot;分时渲染&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-dark github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 分时间段渲染，避免浏览器一次性渲染多个组件时，出现白屏阻塞</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> useDefer</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">maxFrameCount</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> frameCount</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> refreshFrameCount</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    requestAnimationFrame</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 每一帧只渲染一个组件</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">      frameCount.value</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 当渲染的总帧数没有超过 maxFrameCount 时，继续执行</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 超过了 maxFrameCount，则停止</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;"> (frameCount.value </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;"> maxFrameCount) {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">        refreshFrameCount</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  refreshFrameCount</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 返回一个函数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // showInFrameCount：当前组件在第 n 个渲染帧，进行渲染</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">showInFrameCount</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 判断当前渲染的帧数有没有大于 n</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;"> frameCount.value </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;"> showInFrameCount;</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="在组件上使用" tabindex="-1">在组件上使用 <a class="header-anchor" href="#在组件上使用" aria-label="Permalink to &quot;在组件上使用&quot;">​</a></h3><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-dark github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#85E89D;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#85E89D;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> v-for</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;">“n</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> in</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> 100”</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;!-- 渲染组件时，使用 defer 函数来进行分时渲染 --&gt;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#85E89D;--shiki-dark:#85E89D;">heavy-comp</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> v-if</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;">“defer(n)”</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#85E89D;--shiki-dark:#85E89D;">heavy-comp</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#85E89D;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#85E89D;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#85E89D;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 导入 defer 函数</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;"> { useDefer } </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> &#39;./useDefer&#39;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> defer</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> useDefer</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#85E89D;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div>`,4)]))}const F=i(l,[["render",k]]);export{g as __pageData,F as default};
