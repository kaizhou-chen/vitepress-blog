import{_ as i,c as a,a2 as n,o as t}from"./chunks/framework.QcI9UzYB.js";const o=JSON.parse('{"title":"Pinia","description":"","frontmatter":{},"headers":[],"relativePath":"vue/Vue3基础/4.其他/01.Pinia.md","filePath":"vue/Vue3基础/4.其他/01.Pinia.md"}'),e={name:"vue/Vue3基础/4.其他/01.Pinia.md"};function h(p,s,l,k,E,r){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="pinia" tabindex="-1">Pinia <a class="header-anchor" href="#pinia" aria-label="Permalink to &quot;Pinia&quot;">​</a></h1><h2 id="setup-store" tabindex="-1">setup store <a class="header-anchor" href="#setup-store" aria-label="Permalink to &quot;setup store&quot;">​</a></h2><p>用类似组合式函数的语法，来定义 store</p><ul><li><code>ref()</code> 就是 <code>state</code> 属性</li><li><code>computed()</code> 就是 <code>getters</code></li><li><code>function()</code> 就是 <code>actions</code></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-dark github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> useCounterStore</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> defineStore</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;">&#39;counter&#39;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> count</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> name</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;">&#39;Eduardo&#39;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> doubleCount</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> computed</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;"> count.value </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> increment</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">    count.value</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;"> { count, name, doubleCount, increment }</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p></p><p>要让 pinia 正确识别 <code>state</code>，<strong>必须</strong>在 setup store 中返回 <strong><code>state</code> 的所有属性</strong></p></div><h2 id="在组件上使用" tabindex="-1">在组件上使用 <a class="header-anchor" href="#在组件上使用" aria-label="Permalink to &quot;在组件上使用&quot;">​</a></h2><p>响应式数据，要用 <code>storeToRefs</code> 来进行解构</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-dark github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;"> { storeToRefs } </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> &quot;pinia&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;"> { useCounterStore } </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> &#39;./useCounterStore&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// store 里的函数可以解构</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// store 里的响应式数据，要用 storeToRefs 来进行解构</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">increment</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> useCounterStore</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> storeToRefs</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">useCounterStore</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><h3 id="dev-tools-里看不到-pinia" tabindex="-1">dev tools 里看不到 pinia <a class="header-anchor" href="#dev-tools-里看不到-pinia" aria-label="Permalink to &quot;dev tools 里看不到 pinia&quot;">​</a></h3><p>一定要用 <code>app.use(createPinia())</code> 来执行 mount 挂载，才能在 dev tools 里查看 pinia</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-dark github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;"> { createPinia } </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;"> &#39;pinia&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">app</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">createPinia</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">mount</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#9ECBFF;">&#39;#app&#39;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="始终使用-ref" tabindex="-1">始终使用 ref <a class="header-anchor" href="#始终使用-ref" aria-label="Permalink to &quot;始终使用 ref&quot;">​</a></h2><p>由于 reactive 不能被重新赋值，使用 reactive 可能导致问题</p><p>所以在 <strong>pinia</strong> 里始终用 <strong>ref</strong> 来定义数据</p>`,15)]))}const F=i(e,[["render",h]]);export{o as __pageData,F as default};
