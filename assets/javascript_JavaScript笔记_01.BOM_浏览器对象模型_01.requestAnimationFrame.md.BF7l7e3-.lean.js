import{_ as i,c as a,a2 as n,o as l}from"./chunks/framework.QcI9UzYB.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/JavaScript笔记/01.BOM_浏览器对象模型/01.requestAnimationFrame.md","filePath":"javascript/JavaScript笔记/01.BOM_浏览器对象模型/01.requestAnimationFrame.md"}'),t={name:"javascript/JavaScript笔记/01.BOM_浏览器对象模型/01.requestAnimationFrame.md"};function h(k,s,e,p,E,r){return l(),a("div",null,s[0]||(s[0]=[n(`<h2 id="requestanimationframe" tabindex="-1">requestAnimationFrame <a class="header-anchor" href="#requestanimationframe" aria-label="Permalink to &quot;requestAnimationFrame&quot;">​</a></h2><p>在浏览器下次重绘之前调用指定的回调函数，即每一帧执行一次。【执行DOM操作，如动画，大数据渲染】</p><p>执行次数通常为每秒60次，与屏幕的刷新次数有关【60赫兹，则为60次】</p><ul><li>回调函数自身要再次调用 requestAnimationFrame，才能在下一帧继续执行</li><li>回调函数每一帧都会执行，不会出现丢帧现象</li></ul><h3 id="分时函数" tabindex="-1">分时函数 <a class="header-anchor" href="#分时函数" aria-label="Permalink to &quot;分时函数&quot;">​</a></h3><h2 id="requestidlecallback" tabindex="-1">requestIdleCallback <a class="header-anchor" href="#requestidlecallback" aria-label="Permalink to &quot;requestIdleCallback&quot;">​</a></h2><p>在浏览器空闲的时候，执行重计算、非紧急的任务。【不要执行DOM操作】</p><ul><li>setTimeout 在执行回调时，不知道浏览器是否空闲</li><li>requestAnimationFrame 的回调会在每一帧确定执行，属于高优先级任务，而 requestIdleCallback 的回调则不一定，属于低优先级任务</li></ul><h3 id="执行耗时任务" tabindex="-1">执行耗时任务 <a class="header-anchor" href="#执行耗时任务" aria-label="Permalink to &quot;执行耗时任务&quot;">​</a></h3><p>在浏览器空闲时，执行耗时任务</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-dark github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> runTask</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">task</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  requestIdleCallback</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">deadline</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;"> (deadline.</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">timeRemaining</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 浏览器空闲，可以执行任务</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      task</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      callback</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>也可以通过 requestAnimationFrame 来实现</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-dark github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> runTask</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">task</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> start</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;"> Date.</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  requestAnimationFrame</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 如果当前渲染帧，还有时间执行任务</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;"> (Date.</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;"> start </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> 16.6</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      task</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      callback</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 如果没有时间，则放入下个渲染帧执行</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      runTask</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">(task, callback)</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,13)]))}const c=i(t,[["render",h]]);export{F as __pageData,c as default};
